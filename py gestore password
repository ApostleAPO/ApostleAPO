#fare copia e incolla del codice!

import getpass
import json
import os
from cryptography.fernet import Fernet
from colorama import Fore, Style

# Credenziali di accesso
#DA INSERIRE!!!!
USERNAME = ""
#DA INSERIRE!!!!
PASSWORD = "" 


# File per memorizzare le password cifrate
PASSWORD_FILE = "passwords.json.enc"
KEY_FILE = "secret.key"

# Funzione per generare e salvare una chiave di cifratura
def generate_key():
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as key_file:
        key_file.write(key)
    return key

# Funzione per caricare la chiave di cifratura
def load_key():
    if not os.path.exists(KEY_FILE):
        return generate_key()
    with open(KEY_FILE, "rb") as key_file:
        return key_file.read()

# Inizializza la chiave di cifratura e l'oggetto Fernet
key = load_key()
cipher = Fernet(key)

# Funzione di autenticazione
def authenticate():
    username = input("Inserisci username: ")
    password = getpass.getpass("Inserisci password: ")
    return username == USERNAME and password == PASSWORD

# Funzione per caricare le password (decripta il file)
def load_passwords():
    if not os.path.exists(PASSWORD_FILE):
        return {}
    with open(PASSWORD_FILE, "rb") as file:
        encrypted_data = file.read()
    decrypted_data = cipher.decrypt(encrypted_data)
    return json.loads(decrypted_data)

# Funzione per salvare le password (cripta il file)
def save_passwords(passwords):
    data = json.dumps(passwords, indent=4).encode()
    encrypted_data = cipher.encrypt(data)
    with open(PASSWORD_FILE, "wb") as file:
        file.write(encrypted_data)

# Funzione per aggiungere una password
def add_password():
    account = input("Inserisci il nome dell'account: ")
    email = input("Inserisci l'email dell'account: ")
    password = getpass.getpass("Inserisci la password per l'account: ")
    code = input("Inserisci un codice opzionale (0 per non salvare): ")

    # Carica le password attuali
    passwords = load_passwords()

    # Salva solo se il codice non Ã¨ "0"
    passwords[account] = {
        "email": email,
        "password": password,
        "code": code if code != "0" else None
    }

    save_passwords(passwords)
    print(Fore.MAGENTA + f"Password per '{account}' aggiunta con successo." + Style.RESET_ALL)

# Funzione per rimuovere una password
def remove_password():
    account = input("Inserisci il nome dell'account da rimuovere: ")
    passwords = load_passwords()
    if account in passwords:
        del passwords[account]
        save_passwords(passwords)
        print(Fore.MAGENTA + f"Password per '{account}' rimossa con successo." + Style.RESET_ALL)
    else:
        print(Fore.MAGENTA + f"L'account '{account}' non esiste." + Style.RESET_ALL)

# Funzione per visualizzare tutte le password
def view_passwords():
    passwords = load_passwords()
    if passwords:
        print(Fore.MAGENTA + "Password salvate:" + Style.RESET_ALL)
        for account, info in passwords.items():
            code_display = info["code"] if info["code"] else "N/A"
            print(Fore.MAGENTA + f"{account} - Email: {info['email']}, Password: {info['password']}, Codice: {code_display}" + Style.RESET_ALL)
    else:
        print(Fore.MAGENTA + "Nessuna password salvata." + Style.RESET_ALL)

# Menu principale
def main():
    print(Fore.MAGENTA + "=== Gestione Password ===" + Style.RESET_ALL)
    if not authenticate():
        print(Fore.MAGENTA + "Autenticazione fallita. Uscita." + Style.RESET_ALL)
        return

    while True:
        print(Fore.MAGENTA + "\nScegli un'opzione:" + Style.RESET_ALL)
        print("1. Aggiungi una password")
        print("2. Rimuovi una password")
        print("3. Visualizza tutte le password")
        print("4. Esci")
        choice = input("Inserisci il numero dell'opzione: ")

        if choice == '1':
            add_password()
        elif choice == '2':
            remove_password()
        elif choice == '3':
            view_passwords()
        elif choice == '4':
            print(Fore.MAGENTA + "Uscita..." + Style.RESET_ALL)
            break
        else:
            print(Fore.MAGENTA + "Opzione non valida, riprova." + Style.RESET_ALL)

if __name__ == "__main__":
    main()




